sensor:
######################################################
#                 TEMP SENSORS                       #
#                                                    #
######################################################
  - platform: internal_temperature
    name: "${friendly_name} Internal Temperature"   

  - platform: homeassistant
    id: average_temperature
    entity_id: sensor.average_inside_temperature
    on_value:
      - lvgl.label.update:
          id: average_insidetemp_label
          text:
            format: "%.0f°C"
            args: [x]
          text_color: !lambda |-
              if (id(average_temperature).state > -10 && id(average_temperature).state < 0) {
              return lv_color_hex(0x00FF00);
              } else if (id(average_temperature).state > 1 && id(average_temperature).state < 15) {
              return lv_color_hex(0x066ccb);
              } else if (id(average_temperature).state > 16 && id(average_temperature).state < 23) {
              return lv_color_hex(0x54f30a);
              } else if (id(average_temperature).state > 23 && id(average_temperature).state < 35) {
              return lv_color_hex(0xd42323);
              }
              return lv_color_hex(0x00FF00);

  - platform: homeassistant
    id: shelf_temperature
    entity_id: sensor.shelf_sensors_temperature
    on_value:
      - lvgl.label.update:
          id: livingroom_temp_label
          text:
            format: "%.0f°C"
            args: [x]
          text_color: !lambda |-
              if (id(shelf_temperature).state > -10 && id(shelf_temperature).state < 0) {
              return lv_color_hex(0x00FF00);
              } else if (id(shelf_temperature).state > 1 && id(shelf_temperature).state < 15) {
              return lv_color_hex(0x066ccb);
              } else if (id(shelf_temperature).state > 16 && id(shelf_temperature).state < 23) {
              return lv_color_hex(0x54f30a);
              } else if (id(shelf_temperature).state > 23 && id(shelf_temperature).state < 35) {
              return lv_color_hex(0xd42323);
              }
              return lv_color_hex(0x00FF00);

  - platform: homeassistant
    id: bigbutton_temperature
    entity_id: sensor.bigbutton_temperature_2 
    on_value:
      - lvgl.label.update:
          id: bedroom_temp_label
          text:
            format: "%.0f°C"
            args: [x]
          text_color: !lambda |-
              if (id(bigbutton_temperature).state > -10 && id(bigbutton_temperature).state < 0) {
              return lv_color_hex(0x00FF00);
              } else if (id(bigbutton_temperature).state > 1 && id(bigbutton_temperature).state < 15) {
              return lv_color_hex(0x066ccb);
              } else if (id(bigbutton_temperature).state > 16 && id(bigbutton_temperature).state < 23) {
              return lv_color_hex(0x54f30a);
              } else if (id(bigbutton_temperature).state > 23 && id(bigbutton_temperature).state < 35) {
              return lv_color_hex(0xd42323);
              }
              return lv_color_hex(0x00FF00);

  - platform: homeassistant
    id: workshop_temperature
    entity_id: sensor.workshop_sensors_temperature
    on_value:
      - lvgl.label.update:
          id: workshop_temp_label
          text:
            format: "%.0f°C"
            args: [x]
          text_color: !lambda |-
              if (id(workshop_temperature).state > -10 && id(workshop_temperature).state < 0) {
              return lv_color_hex(0x55e1f4);
              } else if (id(workshop_temperature).state > 1 && id(workshop_temperature).state < 15) {
              return lv_color_hex(0x066ccb);
              } else if (id(workshop_temperature).state > 16 && id(workshop_temperature).state < 23) {
              return lv_color_hex(0x54f30a);
              } else if (id(workshop_temperature).state > 23 && id(workshop_temperature).state < 35) {
              return lv_color_hex(0xd42323);
              }
              return lv_color_hex(0x00FF00);            
######################################################
#                      WEATHER                       #
#                                                    #
######################################################

  # Weather temperature
  - platform: homeassistant
    id: outside_temp
    entity_id: sensor.buienradar_feel_temperature # Change the entity from your Home Assistant
    on_value:
      - lvgl.label.update:
          id:
            -  outside_temp_label
            -  outside_temp_wp_label

          text:
            format: "%.0f°C"
            args: [x]
          text_color: !lambda |-
              if (id(outside_temp).state > -10 && id(outside_temp).state < 0) {
              return lv_color_hex(0x55e1f4);
              } else if (id(outside_temp).state > 1 && id(outside_temp).state < 15) {
              return lv_color_hex(0x066ccb);
              } else if (id(outside_temp).state > 16 && id(outside_temp).state < 23) {
              return lv_color_hex(0x54f30a);
              } else if (id(outside_temp).state > 23 && id(outside_temp).state < 35) {
              return lv_color_hex(0xd42323);
              }
              return lv_color_hex(0x00FF00);
  - platform: homeassistant
    id: buienradar_irradiance
    entity_id: sensor.buienradar_irradiance
    on_value:
      - lvgl.label.update:
          id: buienradar_irradiance_label
          text:
            format: "%.0fW/m"
            args: [x]
     
  - platform: homeassistant
    id: buienradar_humidity
    entity_id: sensor.buienradar_humidity
    on_value:
      - lvgl.label.update:
          id: buienradar_humidity_label
          text:
            format: "%.0f%%"
            args: [x]

  - platform: homeassistant
    id: buienradar_rain_last_24h
    entity_id: sensor.buienradar_rain_last_24h
    on_value:
      - lvgl.label.update:
          id: buienradar_rain_last_24h_label
          text:
            format: "%.1fmm"
            args: [x]
              
  - platform: homeassistant
    id: buienradar_rain_last_hour
    entity_id: sensor.buienradar_rain_last_hour
    on_value:
      - lvgl.label.update:
          id: buienradar_rain_last_hour_label
          text:
            format: "%.1fmm"
            args: [x]

  - platform: homeassistant
    id: buienradar_temperature_1d
    entity_id: sensor.buienradar_temperature_1d
    on_value:
      - lvgl.label.update:
          id: buienradar_temperature_1d_label
          text:
            format: "%.0f°C"
            args: [x]

  - platform: homeassistant
    id: buienradar_minimum_rain_1d
    entity_id: sensor.buienradar_minimum_rain_1d
    on_value:
      - lvgl.label.update:
          id: buienradar_minimum_rain_1d_label
          text:
            format: "%.1f"
            args: [x]

  - platform: homeassistant
    id: buienradar_maximum_rain_1d
    entity_id: sensor.buienradar_maximum_rain_1d
    on_value:
      - lvgl.label.update:
          id: buienradar_maximum_rain_1d_label
          text:
            format: "%.1f"
            args: [x]

  - platform: homeassistant
    id: rainchance_1d
    entity_id: sensor.buienradar_rainchance_1d
    unit_of_measurement: percent 
    on_value:
      - lvgl.label.update:
          id: buienradar_rainchance_1d_label
          text:
            format: "%.0f%%"
            args: [x]

  - platform: homeassistant
    id: sunchance_1d
    entity_id: sensor.buienradar_sunchance_1d
    unit_of_measurement: percent
    on_value:
      - lvgl.label.update:
          id: sunchance_1d_label
          text:
            format: "%.0f%%"
            args: [x]

  - platform: homeassistant
    id: media_player_volume
    entity_id: media_player.denon_avr_x2000
    attribute: volume_level
    on_value:
      - lvgl.slider.update:
          id: slider_media_player
          value: !lambda return (x * 100);

  - platform: wifi_signal
    id: wifi_signal_percent
    update_interval: 30s
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    on_value: 
      then:
        - lvgl.label.update:
            id: wifi_status
            text_color: !lambda |-
              if (id(wifi_signal_percent).state > 0) {
              return lv_color_hex(0x00FF00);
              }
              return lv_color_hex(0x333333);
            text: !lambda |-
              if (id(wifi_signal_percent).state > 0 && id(wifi_signal_percent).state < 26) {
              return "${wifi_25}";
              } else if (id(wifi_signal_percent).state > 25 && id(wifi_signal_percent).state < 51) {
              return "${wifi_50}";
              } else if (id(wifi_signal_percent).state > 50 && id(wifi_signal_percent).state < 76) {
              return "${wifi_75}";
              } else if (id(wifi_signal_percent).state > 75) {
              return "${wifi_100}";
              }
              return "${wifi_100}";

  - platform: homeassistant
    id: all_lights_brightness
    entity_id: light.all_lights
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: all_lights_slider
          value: !lambda return x;

  - platform: homeassistant
    id: deathstar_brightness
    entity_id: light.deathstar
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: deathstar_slider
          value: !lambda return x;

  - platform: homeassistant
    id: moto_battery
    entity_id: sensor.moto_g_6_plus_battery_level
    on_value:
      - lvgl.label.update:
          id: moto_battery_label
          text: !lambda |-
            static char buf[10];
            std::string icon;
            if (x == 100.0) {
                icon = "\U000F0079"; // mdi-battery (full)
            } else if (x > 90) {
                icon = "\U000F0082"; // mdi-battery-90
            } else if (x > 80) {
                icon = "\U000F0081"; // mdi-battery-80
            } else if (x > 70) {
                icon = "\U000F0080"; // mdi-battery-70
            } else if (x > 60) {
                icon = "\U000F007F"; // mdi-battery-60
            } else if (x > 50) {
                icon = "\U000F007E"; // mdi-battery-50
            } else if (x > 40) {
                icon = "\U000F007D"; // mdi-battery-40
            } else if (x > 30) {
                icon = "\U000F007C"; // mdi-battery-30
            } else if (x > 20) {
                icon = "\U000F007B"; // mdi-battery-20
            } else if (x > 10) {
                icon = "\U000F007A"; // mdi-battery-10
            } else if (x > 0) {
                icon = "\U000F008E"; // mdi-battery-outline
            } else {
                icon = "\U000F0091"; // mdi-battery-unknown
            }
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;
######################################################
#                Rotary Encoders                     #
#                                                    #
######################################################
   
  # - platform: rotary_encoder
  #   name: "All Lights Rotary"
  #   pin_a:
  #     number: GPIO25
  #     #inverted: true
  #     mode:
  #       input: true
  #       pullup: true
  #   pin_b: 
  #     number: GPIO21
  #     #inverted: true
  #     mode:
  #       input: true
  #       pullup: true
  #   on_clockwise:
  #     - logger.log: "Turned Clockwise"
  #   on_anticlockwise:
  #     - logger.log: "Turned Anticlockwise"


  # # Thermostat temperature
  # - platform: homeassistant
  #   id: thermostat_id1
  #   entity_id: climate.heat_fan
  #   attribute: temperature
  #   on_value: 
  #     then:
  #       - lvgl.arc.update:
  #           id: arc_id1
  #           value: !lambda return x;

  #       - lvgl.label.update:
  #           id: target_temperature_whole
  #           text: !lambda |-
  #             static char buf[10];
  #             int whole_part = static_cast<int>(id(thermostat_id1).state);
  #             snprintf(buf, 10, "%d", whole_part);
  #             return buf;

  #       - lvgl.label.update:
  #           id: target_temperature_fraction
  #           text: !lambda |-
  #             static char buf[10];
  #             int whole_part = static_cast<int>(id(thermostat_id1).state);
  #             int fractional_part = static_cast<int>((id(thermostat_id1).state - whole_part) * 10);
  #             snprintf(buf, 10, ".%01d", fractional_part);
  #             return buf;

text_sensor:
######################################################
#                Villa Sensors                       #
#                                                    #
######################################################
   
  - platform: homeassistant
    entity_id: calendar.aston_villa_fixtures
    attribute: "message"
    id: villa_fixture
    on_value:
      - lvgl.label.update:
          id:
            -  villa_fixture_label
            -  villa_fixture_mp_label
          text: !lambda |-
              return id(villa_fixture).state;             

  - platform: homeassistant
    entity_id: calendar.aston_villa_fixtures
    attribute: "location"
    id: villa_location    
    on_value:
      - lvgl.label.update:
          id: villa_location_label
          text: !lambda |-
              return id(villa_location).state;

  - platform: homeassistant
    entity_id: sensor.villagame_date
    id: villagame_date
    on_value:
      - lvgl.label.update:
          id: villagame_date_label
          text: !lambda |-
              return id(villagame_date).state;

  - platform: homeassistant
    entity_id: sensor.astonvilla_match_date
    id: villa_matchtime    
    on_value:
      - lvgl.label.update:
          id:
            -  villa_matchtime_label
            -  villa_matchtime_mp_label
          text: !lambda |-
            if (id(villa_matchtime).state == "") {
            return "Game On!";
            } else if (id(villa_matchtime).state == " ") {
            return "Game On!";
            }
            return id(villa_matchtime).state;

  - platform: homeassistant
    entity_id: sensor.villa_kickoff_time
    id: villa_ko

  - platform: homeassistant
    entity_id: calendar.aston_villa_fixtures
    attribute: "start_time"
    id: villa_start_time

######################################################
#                Ajax Sensors                       #
#                                                    #
######################################################   
  - platform: homeassistant

    entity_id: calendar.ajax_fixtures
    attribute: "message"
    id: ajax_fixture
    on_value:
      - lvgl.label.update:
          id:
            -  ajax_fixture_label
            -  ajax_fixture_mp_label
          text: !lambda |-
              return id(ajax_fixture).state;

  - platform: homeassistant
    entity_id: calendar.ajax_fixtures
    attribute: "start_time"
    id: ajax_start_time


  - platform: homeassistant
    entity_id: calendar.ajax_fixtures
    attribute: "location"
    id: ajax_location    
    on_value:
      - lvgl.label.update:
          id: ajax_location_label
          text: !lambda |-
              return id(ajax_location).state;

  - platform: homeassistant
    entity_id: sensor.ajax_match_date
    id: ajax_matchtime
    on_value:
      - lvgl.label.update:
          id:
            -  ajax_matchtime_label
            -  ajax_matchtime_mp_label
          text: !lambda |-
            if (id(ajax_matchtime).state == "") {
            return "Game On!";
            } else if (id(ajax_matchtime).state == " ") {
            return "Game On!";
            }
            return id(ajax_matchtime).state;

  - platform: homeassistant
    entity_id: sensor.ajaxgame_date
    id: ajaxgame_date
    on_value:
      - lvgl.label.update:
          id: ajax_start_time_label
          text: !lambda |-
              return id(ajaxgame_date).state;
######################################################
#                   F1 Sensors                       #
#                                                    #
######################################################
  - platform: homeassistant
    internal: false
    entity_id: calendar.formula_1_race_times
    attribute: "message"
    id: f1_fixture
    on_value:
      - lvgl.label.update:
          id: f1_fixture_label
          text: !lambda |-
              return id(f1_fixture).state;

  - platform: homeassistant
    entity_id: calendar.formula_1_race_times
    attribute: "start_time"
    id: f1_start_time


  - platform: homeassistant
    internal: false
    entity_id: calendar.formula_1_race_times
    attribute: "location"
    id: f1_location    
    on_value:
      - lvgl.label.update:
          id: f1_location_label
          text: !lambda |-
              return id(f1_location).state;

  - platform: homeassistant
    entity_id: sensor.f1_session_date
    id: f1_sessiontime
    on_value:
        - lvgl.label.update:
            id: f1_sessiontime_date_label
            text: !lambda |-
              if (id(f1_sessiontime).state == "") {
              return "Lights Out!";
              } else if (id(f1_sessiontime).state == " ") {
              return "Lights Out!";
              }
              return id(f1_sessiontime).state;

  - platform: homeassistant
    entity_id: sensor.f1game_date
    id: f1game_date
    on_value:
      - lvgl.label.update:
          id: f1game_date_label
          text: !lambda |-
              return id(f1game_date).state;    
######################################################
#               Weather text sensors                 #
#                                                    #
######################################################


  - platform: homeassistant
    id: weather_now
    entity_id: sensor.buienradar_detailed_condition
    on_value: 
      then:
        - script.execute: weather_update

  - platform: homeassistant
    id: weather_now_1d
    entity_id: sensor.buienradar_detailed_condition_1d
    on_value: 
      then:
        - script.execute: weather_update_1d

  - platform: homeassistant
    id: buienradar_condition
    entity_id: sensor.buienradar_detailed_condition
    on_value:
      - lvgl.label.update:
          id:
            - condition_label
            - condition_wp_label
          text: !lambda |-
              std::string state = id(buienradar_condition).state.c_str(); {
                  if (state == "clear-night") return "Clear Night";
                  else if (state == "cloudy") return "Cloudy";
                  else if (state == "clear") return "Clear";
                  else if (state == "fog") return "Foggy";
                  else if (state == "hail") return "Hail";
                  else if (state == "lightning") return "Stormy";
                  else if (state == "lightning-rainy") return "Stormy Rain";
                  else if (state == "partlycloudy") return "Bit Cloudy";
                  else if (state == "partlycloudy-fog") return "Bit Foggy";
                  else if (state == "partlycloudy-light-rain") return "Bit Rainy";
                  else if (state == "partlycloudy-rain") return "Bit Rainy";
                  else if (state == "partlycloudy-light-snow") return "Bit Snowy";
                  else if (state == "partlycloudy-snow") return "Bit Snowy";
                  else if (state == "partlycloudy-lightning") return "Bit Stormy";
                  else if (state == "pouring") return "Pouring";
                  else if (state == "rainy") return "Rainy";
                  else if (state == "light-rain") return "Light Rain";
                  else if (state == "snowy") return "Snowy";
                  else if (state == "light-snow") return "Bit Snowy";
                  else if (state == "snowy-rainy") return "Slushy";
                  else if (state == "sunny") return "Sunny";
                  else if (state == "windy") return "Windy";
                  else if (state == "windy-variant") return "Gales";
                  else if (state == "exceptional") return "Nightmareish";

                  
                  return state;
              }


  - platform: homeassistant
    id: buienradar_condition_1d
    entity_id: sensor.buienradar_detailed_condition_1d
    on_value:
      - lvgl.label.update:
          id: condition_label_1d
          text: !lambda |-
              std::string state = id(buienradar_condition_1d).state.c_str(); {
                  if (state == "clear-night") return "Clear Night";
                  else if (state == "cloudy") return "Cloudy";
                  else if (state == "clear") return "Clear";
                  else if (state == "fog") return "Foggy";
                  else if (state == "hail") return "Hail";
                  else if (state == "lightning") return "Stormy";
                  else if (state == "lightning-rainy") return "Stormy Rain";
                  else if (state == "partlycloudy") return "Bit Cloudy";
                  else if (state == "partlycloudy-fog") return "Bit Foggy";
                  else if (state == "partlycloudy-light-rain") return "Bit Rainy";
                  else if (state == "partlycloudy-rain") return "Bit Rainy";
                  else if (state == "partlycloudy-light-snow") return "Bit Snowy";
                  else if (state == "partlycloudy-snow") return "Bit Snowy";
                  else if (state == "partlycloudy-lightning") return "Bit Stormy";
                  else if (state == "pouring") return "Pouring";
                  else if (state == "rainy") return "Rainy";
                  else if (state == "light-rain") return "Light Rain";
                  else if (state == "snowy") return "Snowy";
                  else if (state == "light-snow") return "Bit Snowy";
                  else if (state == "snowy-rainy") return "Slushy";
                  else if (state == "sunny") return "Sunny";
                  else if (state == "windy") return "Windy";
                  else if (state == "windy-variant") return "Gales";
                  else if (state == "exceptional") return "Nightmareish";

                  
                  return state;
              }

  - platform: homeassistant
    id: sun_state
    entity_id: sun.sun

  # Weather state from Home Assistant #
  - platform: homeassistant
    id: weather_state
    entity_id: sensor.buienradar_detailed_condition # Change the entity from your Home Assistant
    on_value: 
      then:
        - lambda: |-
            if (id(sun_state).state == "below_horizon" && (id(weather_state).state == "cloudy" || id(weather_state).state == "partlycloudy")) {
            lv_obj_clear_flag(id(weather_partlycloudy_moon), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_moon), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(sun_state).state != "below_horizon" && id(weather_state).state == "cloudy") {
            lv_obj_clear_flag(id(weather_cloudy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_cloudy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(sun_state).state != "below_horizon" && id(weather_state).state == "clear") {
            lv_obj_clear_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "clear") {
            lv_obj_clear_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            }            
            if (id(sun_state).state != "below_horizon" && id(weather_state).state == "partlycloudy") {
            lv_obj_clear_flag(id(weather_partlycloudy_sun), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_sun), LV_OBJ_FLAG_HIDDEN);
            }
            if ((id(sun_state).state != "below_horizon" && id(weather_state).state == "clear") || (id(sun_state).state != "below_horizon" && id(weather_state).state == "clear-night")) {
            lv_obj_clear_flag(id(weather_sunny), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_sunny), LV_OBJ_FLAG_HIDDEN);
            }
            if ((id(sun_state).state != "below_horizon" && id(weather_state).state == "clear") || (id(sun_state).state != "below_horizon" && id(weather_state).state == "clear")) {
            lv_obj_clear_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_clear), LV_OBJ_FLAG_HIDDEN);
            }
            if ((id(sun_state).state == "below_horizon" && id(weather_state).state == "clear") || (id(sun_state).state == "below_horizon" && id(weather_state).state == "clear")) {
            lv_obj_clear_flag(id(weather_clear_night), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_clear_night), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "rainy") {
            lv_obj_clear_flag(id(weather_rainy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_rainy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "lightning-rainy") {
            lv_obj_clear_flag(id(weather_lightning_rainy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_lightning_rainy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "lightning") {
            lv_obj_clear_flag(id(weather_lightning), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_lightning), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "pouring") {
            lv_obj_clear_flag(id(weather_pouring), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_pouring), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "snowy") {
            lv_obj_clear_flag(id(weather_snowy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_snowy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "snowy-rainy") {
            lv_obj_clear_flag(id(weather_snowy_rainy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_snowy_rainy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "fog") {
            lv_obj_clear_flag(id(weather_fog), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_fog), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "hail") {
            lv_obj_clear_flag(id(weather_hail), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_hail), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "windy") {
            lv_obj_clear_flag(id(weather_windy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_windy), LV_OBJ_FLAG_HIDDEN);
            }            if (id(weather_state).state == "windy-variant") {
            lv_obj_clear_flag(id(weather_windy_variant), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_windy_variant), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-fog") {
            lv_obj_clear_flag(id(weather_partlycloudy_fog), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_fog), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-light-rain") {
            lv_obj_clear_flag(id(weather_partlycloudy_light_rain), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_light_rain), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-rain") {
            lv_obj_clear_flag(id(weather_partlycloudy_rain), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_rain), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-lightning") {
            lv_obj_clear_flag(id(weather_partlycloudy_lightning), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_lightning), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy") {
            lv_obj_clear_flag(id(weather_partlycloudy), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "light-rain") {
            lv_obj_clear_flag(id(weather_light_rain), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_light_rain), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "light-snow") {
            lv_obj_clear_flag(id(weather_light_snow), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_light_snow), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-snow") {
            lv_obj_clear_flag(id(weather_partlycloudy_snow), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_snow), LV_OBJ_FLAG_HIDDEN);
            }
            if (id(weather_state).state == "partlycloudy-light-snow") {
            lv_obj_clear_flag(id(weather_partlycloudy_light_snow), LV_OBJ_FLAG_HIDDEN);
            } else {
            lv_obj_add_flag(id(weather_partlycloudy_light_snow), LV_OBJ_FLAG_HIDDEN);
            }            
  - platform: template
    name: "Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(esptime).now().timestamp;
      strftime(str, sizeof(str), "%H:%M %d-%m-%Y", localtime(&currTime));
      return  { str };
    update_interval: 30s
    icon: mdi:clock-outline

binary_sensor:
  - platform: homeassistant
    id: remote_light
    entity_id: light.all_lights
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: all_light_btn
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: harsh_light
    entity_id: switch.harsh_light
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: harsh_light_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: wled_fireplace
    entity_id: light.wled_workshop_main
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: wled_workshop_main_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: wled_workshop
    entity_id: light.wled_main
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: wled_main_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: wled_ikea
    entity_id: light.wled_fireplace_main
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: wled_fireplace_main_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: big_light
    entity_id: light.deathstar
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: deathstar_light_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: benchpsu_switch
    entity_id: switch.benchpsu_main_power
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: benchpsu_btn
            state:
              checked: !lambda return x;

  - platform: homeassistant
    id: remote_deskfan
    entity_id: switch.desk_fan
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: remote_deskfan_btn
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: remote_bigfan
    entity_id: switch.powerplug1_power
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: remote_bigfan_btn
          state:
            checked: !lambda return x;
